package com.pub.controller;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.util.AjaxMessage;
import com.util.MM;
import com.util.MMUtil;
import com.util.SysUtil;

	@Controller
	@RequestMapping("/")
	public class PubCustomerController extends BasePubController {

		@RequestMapping("/login")
		@ResponseBody
		public Object login(HttpServletResponse response) {
			String loginId = getCookie("OM_LOGIN");
			Map result = new HashMap();
			// Ajax响应的消息。
			AjaxMessage msg = new AjaxMessage();
			if ("".equals(loginId)) {
				if (MMUtil.getMM().containsKey("account")) {
					List<Map<String, Object>> data = pubCustomerService.selectListCustomer();
					String salt = SysUtil.getSysConfig().get("SYS_SALT").toString();
					String password = DigestUtils.md5Hex(MMUtil.getMM().get("password").toString()+salt);
					if (data != null && password.equals(data.get(0).get("password"))) {
						
						if("".equals(data))
						// 把用户ID存储到会话对象中。
						MMUtil.getHttpServletRequest().getSession()
								.setAttribute("c_mid", data.get(0).get("id"));
						
						String random = UUID.randomUUID().toString().replace("-", "");
						//设置服务端Token过期时间。
						data.get(0).put("expireTime", new Date());		
						
						redisDAO.setLoginUser(random.toString(), data.get(0));
						Cookie loginCookie = new Cookie("OM_LOGIN", random);
						loginCookie.setMaxAge(60 * 60 * 24 * 30);// 设置cookie时长一个月
						response.addCookie(loginCookie);										
						result.put("userys", data.get(0));										
					}
				}
			} else {
				Map<String, String> data = redisDAO.getLoginUser(loginId);
				result.put("userys", data);	
			}
			msg.setData(result);
			return msg;
			
		}
		/**
		 * 注销登录
		 * 
		 * @param response
		 * @return
		 */
		@RequestMapping("/loginOut")
		public ModelAndView loginOut(HttpServletResponse response) {
			ModelAndView mav = new ModelAndView();
			String loginId = getCookie("OM_LOGIN");
			if (!"".equals(loginId)) {
				redisDAO.delLoginUser(loginId);
				delCookie("OM_LOGIN", response);
			}
			mav.setViewName("redirect:/pub/sys/login.do");
			return mav;
		}
		//String password = MMUtil.getMM().get("password").toString();
		

	/**
	 * 当前客户个人资料
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/customerProfile")
	@ResponseBody
	public Object customerProfile() {
		MM mm = MMUtil.getMM();
		mm.put("c_tb", "customer");
		Object customerData = commonService.commonGetDataById();
		Map<String, Object> map = (Map<String, Object>) customerData;
		mm.put("c_tb", "commonFile");
		mm.put("type", "customerHeader");
		mm.put("objectId", mm.get("id"));

		// Ajax响应的消息。
		AjaxMessage msg = new AjaxMessage();
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("cData", null);
		if (map.size() > 0) {
			result.put("cData", map);
		}
		msg.setData(result);
		return msg;
	}
	/**
	 * 客户收货地址列表业务
	 * @return
	 */
	@RequestMapping("/mobile/addressList")
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@ResponseBody
	public Object customerAddressList() {
		PageHelper.startPage(MMUtil.getCurrent(), MMUtil.getPageSize());
		List data = pubCustomerService.selectCustomerAddressByCustomerId();
		PageInfo page = new PageInfo(data);

		Map result = new HashMap();
		result.put("page", page);
		AjaxMessage msg = new AjaxMessage();
		msg.setData(result);
		return msg;
	}
	
	/**
	 * 删除收货地址
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/mobile/deleteAddress")
	public Object updateDeleteCustomerAddress() {
		MM mm = MMUtil.getMM();
		mm.put("c_tb", "customerAddress");
		int data = commonService.updateCommonDeleteById();
		AjaxMessage msg = new AjaxMessage();
		return msg;
	}
	
	/** 
	 * 修改或增加收货地址
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping("/mobile/address")
	public Object address() {
		Map result = new HashMap();
		MM mm = MMUtil.getMM();
		result.put("data", null);
		if (mm.get("id") != null) {
			mm.put("c_tb", "customerAddress");
			Object data =commonService.commonGetDataById();
			
			result.put("data", data);
		}
		AjaxMessage msg = new AjaxMessage();
		msg.setData(result);
		return msg;
	}
	
	/**
	 * 添加或修改提交收货地址
	 * @return
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@RequestMapping("/mobile/addressSave")
	public Object addressSave() {
		Map result = new HashMap();
		MM mm = MMUtil.getMM();	
		result.put("udata", null);
		result.put("idata", null);
		if (mm.get("id") != null) {
			Object udata=pubCustomerService.updateCustomerAddress();
			result.put("udata", udata);
		}else{
			Object idata=pubCustomerService.insertCustomerAddress();
			result.put("idata",idata);
		}
		AjaxMessage msg = new AjaxMessage();
		msg.setData(result);
		return msg;
	}
	/**
	 * 用户头像上传
	 * 
	 * @return
	 * @throws IOException
	 * @throws ServletException 
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/mobile/customerProfileHeader")
	@ResponseBody
	public void customerProfileHeader(
			@RequestParam("uploadFile") MultipartFile[] uploadFile,HttpServletResponse response)
			throws IOException, ServletException {		
		MM mm = MMUtil.getMM();		
		String customerId = ""+mm.get("id");
		mm.put("type", "customerHeader");
		mm.put("objectId", mm.get("id"));
		List<Map<String, Object>> fileData = pubCommonService.selectFile();
		String uploadImagePath = (String) SysUtil.getSysConfig().get(
				"SYS_UPLOAD_GOOD_IMAGE_DIR");
		
		//如果用户已经有头像，则替换
		if (fileData.size() == 1) {
			deleteFile(uploadImagePath+fileData.get(0).get("path").toString());
			mm.put("c_tb", "commonFile");
			commonService.updateCommonDeleteById();
			commonSaveFile(uploadFile, uploadImagePath, customerId,
					"customerHeader");
		}
		
		//如果用户没有头像则增加
		if (fileData != null && !fileData.equals("") && fileData.size() != 1) {
			commonSaveFile(uploadFile, uploadImagePath, mm.get("id"),
					"customerHeader");
		}
		
		//拿到file参数
		List<Map<String, Object>> file = pubCommonService.selectFile();
		String path = file.get(0).get("path").toString();
		//拿到customer参数
		mm.put("c_tb", "customer");
		mm.put("id", customerId);
		Object o = commonService.commonGetDataById();
		Map<String,String> map = (Map<String,String>)o;
		Object sex =  map.get("sex"); 
		sex = ""+sex+"";
		//修改customer的headimg
		mm.put("headimg", SysUtil.getSysConfig().get("SYS_IMAGE_PREFIX")+path);
		pubCustomerService.updateCustomer();
		//跳转
		response.sendRedirect("profile.html?nickname="+
				map.get("nickname").toString()+"&sex="+sex+"&id="+customerId+"&path="+SysUtil.getSysConfig().get("SYS_IMAGE_PREFIX")+path);
	}
	
	/**
	 * 当前客户修改个人资料
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/updateProfile")
	@ResponseBody
	public Object updateProfile() {
		MM mm = MMUtil.getMM();
		int resultNum = pubCustomerService.updateCustomer();

		// Ajax响应的消息。
		AjaxMessage msg = new AjaxMessage();
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("resultNum", resultNum);
		msg.setData(result);
		return msg;
	}
}
